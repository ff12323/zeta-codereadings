论思维与复杂

什么是复杂？ 是无穷数量之下，人脑难以覆盖而复杂、需要花费巨量的时间与精力而复杂
  困难的数学问题、题目又是什么呢？ 
    现象：
     1、费尽全身力气却毫无头绪
     2、感到无比抽象，曲折
     3、无法确定，问题是否有答案
  思维创造性的困难：
    现象：
      1、一个困难的问题，如果自己独立地思考而毫无进展，但直接查看答案却能轻易明白。
        原因：
          1、自己的思维，缺乏思维法。（如： 由易而难，递归演进，为归纳法。 如果一个人在面对问题时，想要直接跳过起始点，而跳跃到递归后的结果。往往会被阻塞）
          2、不会转换，有很多的问题都是表象，表象是多样的，转为等效形式。 （例子：从非数学体系转为数学体系来表示，再应用相关方法求解）
             I/O：
               文字化、描述化、不直观 --->  数字化、理论化、直观
          3、 【unknown】
      2、一个困难的问题，如果自己独立地思考而毫无进展，且直接查看答案也毫无进展。




每一步都是思索，每一个细节都要思考清晰。这样的话对于复杂系统而言，一个小的步骤，就能让人思索几年之久，这就是无穷无尽、无边无界的向下索求。
   得到：底层的细节，层层的关系，原理。
   消耗：1、越是细节，耗费时间精力 越是多。 2、重复，层级之间宛若接口，每次都自上而下的遍历，会有大量重复； 3、关联内容膨胀：越是探索，关联的内容会向外扩张。（猜测：深度的增加，必然广度也会增加）
问题： 如何确定思考的边界？或者说如何思考的模型是什么？
   不仅仅要确定深度，也要确定广度！场景掌控度：在不同的场景下，边界也不同。对个人而言，从新手到专家的演变，带有场景掌控度的演变。这是站在另一个维度，更高级来看待这件事情，为了拥有确定边界的能力，要求全。
   二者之间是矛盾的，定边界与能定边界。在实践中解决。。。
能定边界：
   以“度”衡量，如何在不同的“度” 而 （为所需要的场景）定边界 。则引出 嵌套、二层 “能定边界”的问题。
变化其二：
   领域内的思考，与外部领域之间关系，使用关联域度 =（关联域，关联度）来描述，又可以分为 内领域，内领域的关联域度是变化的



思维的困局：
  1、只是偶发原因想到了某个方面，其它的方面难以想到
  2、因为方面很窄，也难有深入的理解便停止了。只能达到某个程度，无法更进一步。
  3、环境原因，难以进入思考状态。



数学复杂性与世界复杂性：
  数学的复杂性是世界复杂性的一个方面，代表了高度形式化，逻辑化，理论化等方面的复杂。
  普通人面对数学复杂性的困难：
    普通人往往在不可避免的面对世界复杂性，就要费尽全身的力气。很难专心投入到某一个困难、不适用于当下的复杂系统中。
    或者，普通人对世界的复杂本身就不存在基本的认知，或是无知（或者说基础比较差），或是停留在很浅的层面。陷入这种状态中，也就很难针对更困难的。
      反之，存在能力包含关系： 如果一个人可以对世界的复杂性进行足够的认知，那么作为其中一部分的数学复杂性也同样能被认知。
  1、回忆一些曾经遇到的复杂数学问题，并思考为何感觉到复杂？
     1、哥德巴赫猜想 ”任一大于2的偶数，都可表示成两个素数之和。“  感觉： 看起来很简单，实际想来却是毫无关联，毫无思路。
     2、费马大定理。  感觉： n阶方程，很难。 证明无解，更是从未做过。
     3、黎曼猜想。 感觉： 自身数学基础知识不足，无法理解问题讲的是什么。 
  2、曾经看过的一些数学书，其中一些讲解，概念为何感觉到复杂？
      图论： 概念、定义、属性极多（一本书看来是通篇的概念），相距较远的概念之间存在某些联系，概念之间的组合、关系、规律等可以形成定理。定理又可以与实际问题、现象之间存在某个联系或而隐含在其中的一个步骤中。领域之内的定理集合可以形成理论，理论可以阐释更复杂、更全面的领域。
        变体、推论的存在，让本就量很多的内容，变得更多，更复杂。自身觉得看不清方向。
        定理有证明，证明的本身或而复杂，或而精妙。证明是普遍存在的，无论是定理的讲解，或问题、题目等。 作为一个会证明的人看来，证明本身是复杂性的一个方面，也许需要理论来支撑，而包含前向复杂内容，可以错综复杂的，曲折前进的。正向是思维，创造、 变化、 方向，策略，基础，经验，观察； 反向是停滞、回环、跳跃、错误、不知变通；
        扩展部分，在这之外，如何判断一个问题是否有解？如何判断自身是否存在错误？
        数学之外，是复杂的开始。。。。。


复杂性之阅读Linux源码：
    工具少，阅读困难。
    目的不明确，无从下手。
    量大，方面多。陷入到 茫茫代码中，随意跳转查找都看不懂而放弃（从开始到放弃）。
阅读自问：
  1、我阅读期望达到什么目的？完成到何种程度？ 
    “能够看懂代码”（模糊的回答），可是怎么样算能看懂呢？ 
      能够识别出主要流程，次要流程
      能够看懂主要流程的每一行代码的做了什么，目的是什么（代码意义）。（或者说，能够看懂commit？）
      能够从高层看，解读出代码的设计架构，组件之间的关系层级。
      架构的上层是背景。
    “能够定位相关的问题”
    “能够开发相关的需求，特性（feature）”
    “能够熟练的使用，能解决使用过程遇到的问题”
  2、如何看懂代码？
     有开发者文档、设计文档等，则先阅读文档。
  3、代码意义？ 有很多种，有些没有相关的背景知识是难以理解，甚至不可能理解。
     硬件相关，架构相关。
     其它语言相关（内联汇编等）
     语言特性相关（特殊语法）
     编译器相关（很多编译器提供的特性）
     外部库、组件、API相关（使用外部的内容）
     业务逻辑。

