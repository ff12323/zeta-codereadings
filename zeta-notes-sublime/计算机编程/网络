网络

shell脚本学习：

tools：
  ndisc6 、 seq 、 arping


 ip -6 neigh show dev <ethx> | grep -v "^fe80::" | awk -F ' lladdr ' '{print $2}'
  - IPv6链接本地地址（link-local address），这些地址不是真正的MAC地址。


${1%/*}和${1#*/}是Shell中的参数扩展，用于从命令行参数中提取特定的部分。
${1%/*}的含义是去掉参数$1中最后一个/及其后面的部分，即提取网络地址。
${1#*/}的含义是去掉参数$1中第一个/及其前面的部分，即提取子网掩码的长度。
   例如，如果命令行参数是192.168.1.0/24，那么${1%/*}的值将是192.168.1.0，${1#*/}的值将是24。

arp -n -i <intf>

echo "obase=16;${i}" | bc | tr A-Z a-z
 echo打印的内容，传入bc进行进制转换。


交换机策略路由有问题，是什么意思？
  策略路由典型配置： https://support.huawei.com/enterprise/zh/doc/EDOC1000069491/df424d7a
交换机： HUAWEI CE8850E

lspci -vnn



perftest:
  ib_write_bw 



gdb僵尸进程：
2697262       1 42  80   0 -     0 -      17:18 ?        00:26:07 [fio_test] <defunct>

```
Attaching to process 2697262
warning: process 2697262 is already traced by process 2756840process 2697262 is a zombie - the process has already terminated
ptrace: Operation not permitted.
(gdb) 
```

如何对ping进行代理：
  https://superuser.com/questions/175428/how-to-ping-when-behind-a-proxy


Google： 《端到端RoCE概念原理与部署调优》


socket编程：

epoll_create
eventfd
epoll_wait
/proc/sys/net/ipv4/ip_local_reserved_ports
FIONREAD
/proc/sys/net/ipv4/tcp_congestion_control: cubic

1、场景1，在下IO过程中，出现故障
我们使用一个io tester工具下IO时，如果云块设备发生故障时，会导致IO任务无法完成。卡在内核态。 导致 <defunct>，进程僵尸。
> 系统一直认为这个bio未完成，所以这个__lock_page()就一直不被唤醒了
 - https://groups.google.com/g/cn.bbs.comp.unix.development.kernel/c/p5nsKhQU46g
```
[user@ ~]# cat /proc/2316545/task/2316564/stack 
[<0>] __lock_page+0x138/0x230
[<0>] truncate_inode_pages_range+0x780/0x8b0
[<0>] __blkdev_put+0x87/0x1f0
[<0>] blkdev_close+0x21/0x30
[<0>] __fput+0xb7/0x230
[<0>] task_work_run+0x8a/0xb0
[<0>] do_exit+0x3a9/0xba0
[<0>] do_group_exit+0x33/0xb0
[<0>] get_signal+0x15e/0x850
[<0>] do_signal+0x36/0x610
[<0>] exit_to_usermode_loop+0x71/0xe0
[<0>] do_syscall_64+0x181/0x1b0
[<0>] entry_SYSCALL_64_after_hwframe+0x65/0xca
[<0>] 0xffffffffffffffff
```

2、场景2： 已经存在故障，fio对块设备下IO。卡在内核态，打开设备失败
```
[user@ ~]# cat /proc/1650821/task/*/stack
[<0>] __blkdev_get+0x81/0x590
[<0>] blkdev_get+0x149/0x3a0
[<0>] do_dentry_open+0x1d5/0x370
[<0>] path_openat+0x557/0x1730
[<0>] do_filp_open+0x9b/0x110
[<0>] do_sys_open+0x1bd/0x250
[<0>] do_syscall_64+0x5b/0x1b0
[<0>] entry_SYSCALL_64_after_hwframe+0x65/0xca
[<0>] 0xffffffffffffffff
```