定位问题记录


1、对比正常的日志。可以确定是 CreatLogPlog，创建的时候出现问题了。
....
....

定位的策略：
   定位问题，有时候耗时很长。难于1次，快速的定位完。也不见得有结论，这时需要考虑可以“中断/继续”的技巧。
      1、记录日志信息，过程信息，思路信息，时间信息，流程信息。可以中断后继续，可以再审视自己的定位过程。

定位困难：
  1、找不到方向，怀疑无用。
   2、是否怀疑错地方了呢？
       2.1：当前是看到了block的任务阻塞日志，且是协程框架的线程6，属于XXXClient的线程。
             根据之前的经验，怀疑是这个线程进入到 1、死循环 2、死锁（自旋锁） 3、条件变量
                1、CreatLogXXX 流程没有死循环
                3、条件变量不存在
   3、无法本地复现。
   4、排查一遍create流程的代码，确定无问题。（且单独运行时也无问题）
   5、剩下的怀疑点，mLock。 这是全局的锁。也是 CreatLogXXX的唯一锁。如果被其它地方影响，很可能出现bug。
      5.1 排查了 mLock的12个使用地方，发现都范围锁。全都是使用后，会释放的。（也就不可能是死锁，只有1个锁，与2个锁造成死锁的例子不符）
  定位耗时：【3h】，依旧没有结论。 应当先暂停，还有其它事情要做。
  ====
  是否还有基础的知识不了解？



定位问题的失败记录：
   1、进程core，生成core文件的过程中，调用clone --> ptrace --> await 等系统调用的时候，卡在等于某个线程的时候。
      自身背景： 从未遇到过这种问题。
      错误点： 总是想着依赖gdb来解决，实际上gdb解决不了。 因为我的判断边界就是错误的，在错误的范围之下，用错误的办法，以及错误的努力。
      暴露的自身问题：
        1、搜索方向： 错误
        2、搜索方式： 错误
        3、解决问题的方式： 方式单一，不会寻求帮助
        4、判断力： 缺少判断力，面对未知与复杂我极易陷入到回环之中。 但是我不敢也无法做到（证明）否定回环的道路，不是正确的道路。 我应该意识到回环代表着是时间浪费。
        5、时间浪费： 
      改进点：
        1、提升问题定界的能力，节省自身的时间。有时候，并不需要定位出根本原因，而是快速确定边界在哪里。比如我一开始判断是业务的问题，但实际不是，又判断这是框架的问题，但是实际也不是。每一次的错误判断，都导致时间浪费在了错误范围。
      高者处理： 2分钟，迅速完成。 通过查看原进程的proc的 stack内核堆栈。 可以判断出是驱动卡住，导致无法退出。